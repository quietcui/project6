{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  name: 'AppPicture',\n  data() {\n    return {\n      name: '',\n      password: '',\n      picture: '',\n      NAME: '',\n      BALANCE: '',\n      USERID: '',\n      PASSWORD: '',\n      pictureid: '',\n      picturename: '',\n      pictureprice: '',\n      picturecreatid: ''\n    };\n  },\n  mounted() {\n    // 在组件加载时自动执行的函数\n    this.NAME = sessionStorage.getItem('NAME');\n    this.USERID = sessionStorage.getItem('USERID');\n    this.BALANCE = sessionStorage.getItem('BALANCE');\n    this.PASSWORD = sessionStorage.getItem('PASSWORD');\n    this.pictureid = this.$route.query.wpid;\n    sessionStorage.setItem('SEARCHTYPE', '');\n    console.log(this.NAME);\n    console.log(this.USERID);\n    console.log(this.PASSWORD);\n    console.log(this.BALANCE);\n    console.log(this.$route.query.name);\n    console.log(this.$route.query.vwid);\n    this.postImagePrice();\n  },\n  methods: {\n    touser() {\n      let self = this;\n      self.$router.push(\"/user\");\n    },\n    toindex() {\n      let self = this;\n      self.$router.push(\"/index\");\n    },\n    toupload() {\n      this.$router.push(\"/upload\");\n    },\n    async postImagePrice() {\n      let vwallpaper = {\n        vwpId: this.pictureid,\n        name: '',\n        createId: '',\n        price: '',\n        type: '',\n        path: ''\n      };\n      try {\n        //使用axios发送一个GET请求，假设后端有一个接口可以返回图片的文件名\n        let response = await axios.post(\"http://localhost:8090/vwallpaper/getImagesByVwpid\", vwallpaper);\n        //如果请求成功，将文件名保存到imageName属性中\n        if (response.status === 200) {\n          console.log(response.data);\n          console.log(this.imageName);\n          this.picturename = response.data.data[0].name;\n          this.picturecreatid = response.data.data[0].createId;\n          this.pictureprice = response.data.data[0].price;\n        }\n      } catch (error) {\n        //如果请求失败，打印错误信息\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","password","picture","NAME","BALANCE","USERID","PASSWORD","pictureid","picturename","pictureprice","picturecreatid","mounted","sessionStorage","getItem","$route","query","wpid","setItem","console","log","vwid","postImagePrice","methods","touser","self","$router","push","toindex","toupload","vwallpaper","vwpId","createId","price","type","path","response","post","status","imageName","error"],"sources":["src/components/AppPicture.vue"],"sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        <div class=\"header\">\r\n            <div class=\"logo\">壁纸引擎</div>\r\n            <div class=\"nav\">\r\n                <button @click=\"toindex\">首页</button>\r\n                <button>分类</button>\r\n                <button @click=\"toupload\">上传</button>\r\n                <div class=\"userimgbox\">\r\n                    <img src=\"../assets/tou1.jpg\" alt=\"\" width=\"25\" @click=\"touser\">\r\n                    <div>{{ this.NAME }}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"nav\">\r\n            <button @click=\"toindex\"> 《--返回上一页</button>\r\n        </div>\r\n        <div class=\"info\">\r\n            <div>壁纸名称: {{this.picturename}}</div>\r\n            <div>壁纸价格: {{this.pictureprice}}￥</div>\r\n            <div>壁纸创作者: {{this.picturecreatid}}</div>\r\n            <button>下载</button>\r\n        </div>\r\n        <div class=\"image\">\r\n            <img v-if=\"this.$route.query.name\" :src=\"this.$route.query.name\">\r\n        </div>\r\n        <div class=\"footer\">\r\n            <p>© 2023 壁纸引擎. All rights reserved.</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n    \r\n<script>\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    name: 'AppPicture',\r\n    data() {\r\n        return {\r\n            name: '',\r\n            password: '',\r\n            picture: '',\r\n            NAME:'',\r\n            BALANCE:'',\r\n            USERID:'',\r\n            PASSWORD:'',\r\n            pictureid:'',\r\n            picturename:'',\r\n            pictureprice:'',\r\n            picturecreatid:'',\r\n        }\r\n    },\r\n    mounted() {\r\n      // 在组件加载时自动执行的函数\r\n      this.NAME=sessionStorage.getItem('NAME')\r\n      this.USERID=sessionStorage.getItem('USERID')\r\n      this.BALANCE=sessionStorage.getItem('BALANCE')\r\n      this.PASSWORD=sessionStorage.getItem('PASSWORD')\r\n      this.pictureid=this.$route.query.wpid;\r\n      sessionStorage.setItem('SEARCHTYPE', '')\r\n      console.log(this.NAME)\r\n      console.log(this.USERID)\r\n      console.log(this.PASSWORD)\r\n      console.log(this.BALANCE)\r\n      console.log(this.$route.query.name)\r\n      console.log(this.$route.query.vwid)\r\n      this.postImagePrice();\r\n    },\r\n    methods: {\r\n        touser() {\r\n            let self = this;\r\n            self.$router.push(\"/user\");\r\n        },\r\n        toindex() {\r\n            let self = this;\r\n            self.$router.push(\"/index\");\r\n        },\r\n        toupload() {\r\n            this.$router.push(\"/upload\");\r\n        },\r\n        async postImagePrice() {\r\n        let vwallpaper = {\r\n\r\n          vwpId:this.pictureid ,\r\n          name:'',\r\n          createId:'',\r\n          price:'',\r\n          type:'',\r\n          path:''\r\n\r\n        };\r\n        try {\r\n          //使用axios发送一个GET请求，假设后端有一个接口可以返回图片的文件名\r\n          let response = await axios.post(\"http://localhost:8090/vwallpaper/getImagesByVwpid\",vwallpaper);\r\n          //如果请求成功，将文件名保存到imageName属性中\r\n          if (response.status === 200) {\r\n            console.log(response.data);\r\n            console.log(this.imageName);\r\n            this.picturename=response.data.data[0].name;\r\n            this.picturecreatid=response.data.data[0].createId;\r\n            this.pictureprice=response.data.data[0].price;\r\n\r\n          }\r\n        } catch (error) {\r\n          //如果请求失败，打印错误信息\r\n          console.error(error);\r\n        }\r\n      },\r\n    }\r\n}\r\n\r\n</script>\r\n    \r\n<style scoped>\r\nbody {\r\n    background-color: #f0f0f0;\r\n    font-family: Arial, sans-serif;\r\n}\r\n\r\n.container {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 20px;\r\n}\r\n\r\n.logo {\r\n    font-size: 32px;\r\n    font-weight: bold;\r\n    color: #333333;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.nav img:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.nav button {\r\n  text-decoration: none;\r\n  color: #333333;\r\n  font-size: 16px;\r\n  border: none;\r\n  background-color: rgba(255, 255, 255, 0);\r\n}\r\n\r\n.nav button:hover {\r\n  color: #0099ff;\r\n  cursor: pointer;\r\n}\r\n\r\n.back {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    margin-top: 20px;\r\n}\r\n\r\n.back a {\r\n    text-decoration: none;\r\n    color: #333333;\r\n    font-size: 16px;\r\n}\r\n\r\n.back a:hover {\r\n    color: #0099ff;\r\n}\r\n\r\n.image {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-top: 20px;\r\n}\r\n\r\n.image img {\r\n    width: 80%;\r\n    height: auto;\r\n}\r\n\r\n.info {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin-top: 20px;\r\n    margin-left: 150px;\r\n\r\n  gap: 20px;\r\n  width: 1000px;\r\n  height: 100px;\r\n  margin-right: 10px;\r\n  object-fit: cover;\r\n  border-top: 1px solid rgba(255, 255, 255, 0.5);\r\n  /* 在盒子的顶部添加一个1像素宽的边框，颜色为白色，透明度为50%。 */\r\n  border-left: 1px solid rgba(255, 255, 255, 0.5);\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.3);\r\n  border-right: 1px solid rgba(255, 255, 255, 0.3);\r\n  backdrop-filter: blur(10px);\r\n  /* 对盒子应用一个模糊半透明的效果，模糊半径为10像素。这样可以创建玻璃模糊的效果，模糊盒子后面的内容。 */\r\n  background: rgba(50, 50, 50, 0.2);\r\n  /* 设置盒子的背景颜色为半透明的深灰色（RGB值为50, 50, 50），透明度为20%。 */\r\n\r\n  /* 设置盒子使用Flexbox布局。 */\r\n  /* 将Flex容器的主轴方向设置为垂直，使得项目在列方向上排列。 */\r\n  justify-content: center;\r\n  /*  在盒子的垂直方向上居中内容。 */\r\n  align-items: center;\r\n  /* 在盒子的水平方向上居中内容。 */\r\n  border-radius: 10px;\r\n  /* 应用一个10像素的圆角，使得盒子的角变得圆滑。 */\r\n}\r\n\r\n.info p {\r\n    font-size: 16px;\r\n    color: #333333;\r\n}\r\n\r\n.info button {\r\n    width: 100px;\r\n    height: 40px;\r\n    border: none;\r\n    border-radius: 20px;\r\n    background-color: #0099ff;\r\n    color: white;\r\n    font-size: 16px;\r\n}\r\n\r\n.info button:hover {\r\n    background-color: #0066cc;\r\n}\r\n\r\n.footer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 20px;\r\n}\r\n\r\n.footer p {\r\n    font-size: 14px;\r\n    color: #999999;\r\n}\r\n\r\n.userimgbox {\r\n    margin-top: 20px;\r\n}\r\n</style>\r\n    \r\n    "],"mappings":";AAkCA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAD,IAAA;MACAE,QAAA;MACAC,OAAA;MACAC,IAAA;MACAC,OAAA;MACAC,MAAA;MACAC,QAAA;MACAC,SAAA;MACAC,WAAA;MACAC,YAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAR,IAAA,GAAAS,cAAA,CAAAC,OAAA;IACA,KAAAR,MAAA,GAAAO,cAAA,CAAAC,OAAA;IACA,KAAAT,OAAA,GAAAQ,cAAA,CAAAC,OAAA;IACA,KAAAP,QAAA,GAAAM,cAAA,CAAAC,OAAA;IACA,KAAAN,SAAA,QAAAO,MAAA,CAAAC,KAAA,CAAAC,IAAA;IACAJ,cAAA,CAAAK,OAAA;IACAC,OAAA,CAAAC,GAAA,MAAAhB,IAAA;IACAe,OAAA,CAAAC,GAAA,MAAAd,MAAA;IACAa,OAAA,CAAAC,GAAA,MAAAb,QAAA;IACAY,OAAA,CAAAC,GAAA,MAAAf,OAAA;IACAc,OAAA,CAAAC,GAAA,MAAAL,MAAA,CAAAC,KAAA,CAAAhB,IAAA;IACAmB,OAAA,CAAAC,GAAA,MAAAL,MAAA,CAAAC,KAAA,CAAAK,IAAA;IACA,KAAAC,cAAA;EACA;EACAC,OAAA;IACAC,OAAA;MACA,IAAAC,IAAA;MACAA,IAAA,CAAAC,OAAA,CAAAC,IAAA;IACA;IACAC,QAAA;MACA,IAAAH,IAAA;MACAA,IAAA,CAAAC,OAAA,CAAAC,IAAA;IACA;IACAE,SAAA;MACA,KAAAH,OAAA,CAAAC,IAAA;IACA;IACA,MAAAL,eAAA;MACA,IAAAQ,UAAA;QAEAC,KAAA,OAAAvB,SAAA;QACAR,IAAA;QACAgC,QAAA;QACAC,KAAA;QACAC,IAAA;QACAC,IAAA;MAEA;MACA;QACA;QACA,IAAAC,QAAA,SAAArC,KAAA,CAAAsC,IAAA,sDAAAP,UAAA;QACA;QACA,IAAAM,QAAA,CAAAE,MAAA;UACAnB,OAAA,CAAAC,GAAA,CAAAgB,QAAA,CAAAnC,IAAA;UACAkB,OAAA,CAAAC,GAAA,MAAAmB,SAAA;UACA,KAAA9B,WAAA,GAAA2B,QAAA,CAAAnC,IAAA,CAAAA,IAAA,IAAAD,IAAA;UACA,KAAAW,cAAA,GAAAyB,QAAA,CAAAnC,IAAA,CAAAA,IAAA,IAAA+B,QAAA;UACA,KAAAtB,YAAA,GAAA0B,QAAA,CAAAnC,IAAA,CAAAA,IAAA,IAAAgC,KAAA;QAEA;MACA,SAAAO,KAAA;QACA;QACArB,OAAA,CAAAqB,KAAA,CAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}