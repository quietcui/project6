{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"ImageViewer\",\n  data() {\n    return {\n      imageName: \"\",\n      //用于保存图片的文件名\n      imageName1: \"\",\n      imageNames: ['']\n    };\n  },\n  methods: {\n    //定义一个方法，用于从后端获取图片的文件名\n    getImageUrl(imageName) {\n      return `http://localhost:8090/vwallpaper/ShowPicture?filepath=${imageName}`;\n    },\n    async postImageName() {\n      let vwallpaper = {\n        vwpId: '',\n        name: '',\n        createId: '',\n        price: '',\n        type: '风景',\n        path: ''\n      };\n      try {\n        //使用axios发送一个GET请求，假设后端有一个接口可以返回图片的文件名\n        let response = await axios.post(\"http://localhost:8090/vwallpaper/getImagesByTypeAndName\", vwallpaper);\n        //如果请求成功，将文件名保存到imageName属性中\n        if (response.status === 200) {\n          this.imageName = response.data.data[0].path;\n          this.imageName1 = response.data.data[1].path;\n          console.log(response.data);\n          console.log(this.imageName);\n          let i = 0;\n          while (response.data.data[1].path != null) {\n            push();\n          }\n        }\n      } catch (error) {\n        //如果请求失败，打印错误信息\n        console.error(error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","imageName","imageName1","imageNames","methods","getImageUrl","postImageName","vwallpaper","vwpId","createId","price","type","path","response","post","status","console","log","i","push","error"],"sources":["src/components/PictureLoad2.vue"],"sourcesContent":["<!--<template>-->\r\n<!--  <div class=\"image-viewer\">-->\r\n<!--    <el-button type=\"primary\" @click=\"postImageName\">获取图片</el-button>-->\r\n\r\n<!--    for(i=0;i<=10;i++){-->\r\n\r\n<!--    this.imageName = response.data.data[i].path;-->\r\n<!--    <el-image v-if=\"imageName\" :src=\"`http://localhost:8090/vwallpaper/ShowPicture?filepath=${imageName}`\" fit=\"contain\"></el-image>-->\r\n<!--  }-->\r\n<!--  </div>-->\r\n<!--</template>-->\r\n\r\n<!--<script>-->\r\n<!--import axios from \"axios\";-->\r\n<!--export default {-->\r\n<!--  name: \"ImageViewer\",-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      imageName: \"\", //用于保存图片的文件名-->\r\n<!--      imageName1:\"\",-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    //定义一个方法，用于从后端获取图片的文件名-->\r\n<!--    async postImageName() {-->\r\n<!--      let vwallpaper = {-->\r\n\r\n<!--        vwpId:'' ,-->\r\n<!--        name:'',-->\r\n<!--        createId:'',-->\r\n<!--        price:'',-->\r\n<!--        type:'风景',-->\r\n<!--        path:''-->\r\n\r\n<!--      };-->\r\n<!--      try {-->\r\n<!--        //使用axios发送一个GET请求，假设后端有一个接口可以返回图片的文件名-->\r\n<!--        let response = await axios.post(\"http://localhost:8090/vwallpaper/getImagesByTypeAndName\",vwallpaper);-->\r\n<!--        //如果请求成功，将文件名保存到imageName属性中-->\r\n<!--        if (response.status === 200) {-->\r\n<!--          this.imageName = response.data.data[0].path;-->\r\n<!--          this.imageName1 = response.data.data[1].path;-->\r\n<!--          console.log(response.data);-->\r\n<!--          console.log(this.imageName);-->\r\n<!--        }-->\r\n<!--      } catch (error) {-->\r\n<!--        //如果请求失败，打印错误信息-->\r\n<!--        console.error(error);-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--  },-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<!--<style scoped>-->\r\n<!--.image-viewer {-->\r\n<!--  width: 600px;-->\r\n<!--  height: 400px;-->\r\n<!--  margin: 20px auto;-->\r\n<!--  border: 1px solid #ccc;-->\r\n<!--}-->\r\n<!--</style>-->\r\n\r\n<template>\r\n  <div class=\"image-viewer\">\r\n    <el-button type=\"primary\" @click=\"postImageName\">获取图片</el-button>\r\n\r\n    <el-image v-for=\"(imageName, index) in imageNames\" :key=\"index\" :src=\"getImageUrl(imageName)\" fit=\"contain\"></el-image>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nexport default {\r\n  name: \"ImageViewer\",\r\n  data() {\r\n    return {\r\n      imageName: \"\", //用于保存图片的文件名\r\n      imageName1:\"\",\r\n      imageNames: ['']\r\n    };\r\n  },\r\n  methods: {\r\n    //定义一个方法，用于从后端获取图片的文件名\r\n    getImageUrl(imageName) {\r\n      return `http://localhost:8090/vwallpaper/ShowPicture?filepath=${imageName}`;\r\n    },\r\n    async postImageName() {\r\n      let vwallpaper = {\r\n\r\n        vwpId:'' ,\r\n        name:'',\r\n        createId:'',\r\n        price:'',\r\n        type:'风景',\r\n        path:''\r\n\r\n      };\r\n      try {\r\n        //使用axios发送一个GET请求，假设后端有一个接口可以返回图片的文件名\r\n        let response = await axios.post(\"http://localhost:8090/vwallpaper/getImagesByTypeAndName\",vwallpaper);\r\n        //如果请求成功，将文件名保存到imageName属性中\r\n        if (response.status === 200) {\r\n          this.imageName = response.data.data[0].path;\r\n          this.imageName1 = response.data.data[1].path;\r\n          console.log(response.data);\r\n          console.log(this.imageName);\r\n          let i=0;\r\n          while(response.data.data[1].path!=null){\r\n            push()\r\n          }\r\n        }\r\n      } catch (error) {\r\n        //如果请求失败，打印错误信息\r\n        console.error(error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.image-viewer {\r\n  width: 600px;\r\n  height: 400px;\r\n  margin: 20px auto;\r\n  border: 1px solid #ccc;\r\n}\r\n</style>\r\n\r\n\r\n"],"mappings":"AAwEA,OAAAA,KAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,UAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,YAAAJ,SAAA;MACA,gEAAAA,SAAA;IACA;IACA,MAAAK,cAAA;MACA,IAAAC,UAAA;QAEAC,KAAA;QACAT,IAAA;QACAU,QAAA;QACAC,KAAA;QACAC,IAAA;QACAC,IAAA;MAEA;MACA;QACA;QACA,IAAAC,QAAA,SAAAf,KAAA,CAAAgB,IAAA,4DAAAP,UAAA;QACA;QACA,IAAAM,QAAA,CAAAE,MAAA;UACA,KAAAd,SAAA,GAAAY,QAAA,CAAAb,IAAA,CAAAA,IAAA,IAAAY,IAAA;UACA,KAAAV,UAAA,GAAAW,QAAA,CAAAb,IAAA,CAAAA,IAAA,IAAAY,IAAA;UACAI,OAAA,CAAAC,GAAA,CAAAJ,QAAA,CAAAb,IAAA;UACAgB,OAAA,CAAAC,GAAA,MAAAhB,SAAA;UACA,IAAAiB,CAAA;UACA,OAAAL,QAAA,CAAAb,IAAA,CAAAA,IAAA,IAAAY,IAAA;YACAO,IAAA;UACA;QACA;MACA,SAAAC,KAAA;QACA;QACAJ,OAAA,CAAAI,KAAA,CAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}